{"version":3,"sources":["data/demographics.js","data/likert.js","data/freeform.js","main.js"],"names":["singleResponse","question","options","type","response","map","text","singleResponseWithOther","multipleResponse","multipleResponseWithOther","demographics","likertScale","title","description","statements","statement","ratings","likert","freeform","app","Elm","Main","init","flags","ports","elmToLocalStorage","subscribe","handleMsg","actions","responses","forEach","action","$","batchActions","window","localStorage","clear","tag","responseType","shift","localStorageToElm","send","data","error","key","getItem","push","JSON","parse","value","setItem","stringify"],"mappings":";;AGAA;;AAEA;;AACA;AHHO,AEAP,ADAA,IDAaA,AEAPkB,QAAQ,GAAG,GFAU,GAAG,GEAxBA,MFAOlB,EEAI,CAACY,KAAD,MFAa,CAACX,QAAD,EAAWC,OAAX;AAAA,AEAb,ADCV,AEGP,IFHaS,KDDyC,AEAzB,MDCL,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAQC,WAAR,EAAqBC,UAArB;ADAvBX,AED2BS,ADCJ,IDAvBT,AED2BS,IFCvB,CED4B,ADC4B,CDAtD,CEDqBA,KAAF,UFAyB;AAElDX,AEFkCG,ADEpCQ,IDAEX,AEFkCG,ADEpCQ,KAAK,EAAEA,CDAG,AEFkC,EFEhCX,AEFkC,EDCgB,MDDV;AAGlDG,AEHyB,ADG3BS,GCHe,CFGbT,ACAFS,QDAU,EAAE,CCAD,EAAEA,CDHuC,UCCU;ADG5DX,AEJa,ADIfY,AEEF,CDNA,GFIIZ,ACAFY,AEEIK,GAAG,GAAGC,CHFD,EAAElB,CCAD,EAAEY,IDAM,AGEJO,CHFKhB,GAAR,AGED,CHFa,AGEJiB,CFFG,CAACjB,EEEb,CFFE,AEEY,CFFG,IDAJC,IAAI,ECAAS,SAAS;ADAT,ACAS,AEGlCQ,EAAAA,KAAK,EAAE,IHHuB,ACAS;ADAPjB,ACASS,AEGhCL,IAAAA,IHHuBJ,ACASS,IDAL,EAAJT,CEFrB,CACXY,ACIqB,CFH6B,CDApB,AGGrBR,CFHgCK,KCDjC,CAAC,cCIF,qCDJC,CADG,EAEXG,QAAQ,CAAC,mFAAD,CAFG,EAGXA,QAAQ,CAAC,qFAAD,CAHG,EAIXA,QAAQ,CAAC,kEAAD,CAJG,EAMXA,QAAQ,CAAC,0FAAD,CANG,EAOXA,QAAQ,CAAC,4FAAD,CAPG,EAQXA,QAAQ,CAAC,kEAAD,CARG,EAUXA,QAAQ,CAAC,0GAAD,CAVG;AFE2Bf,ACAC,AEGhBc,IAAAA,GFHW,CDAId,EGGT,EHHa,AGGnBc,EHHqB,aGGrC;AHHuB,ACAI,AEGHC,IAAAA,CFHrB,CAHkD,CDGnC,KGGc,EAARA;AHHN,ACC3BF,AEES,IFFTA,CDDW,MCCJ,EAAE,CACP,mBADO,EAEP,UAFO,EAGP,SAHO,EAIP,OAJO,EAKP,gBALO;ADL2C,ACCU,AEKtC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","file":"main.1f19ae8e.js","sourceRoot":"../src","sourcesContent":["export const singleResponse = (question, options) => ({\n    type: 'SingleResponse',\n    question: question,\n    response: null,\n    options: options.map(text => ({ text, type: 'Fixed' }))\n})\n\nexport const singleResponseWithOther = (question, options) => ({\n    type: 'SingleResponseWithOther',\n    question: question,\n    response: null,\n    options: options.map(text => ({ text, type: 'Fixed' }))\n})\n\nexport const multipleResponse = (question, options) => ({\n    type: 'MultipleResponse',\n    question: question,\n    response: [],\n    options: options.map(text => ({ text, type: 'Fixed' }))\n})\n\nexport const multipleResponseWithOther = (question, options) => ({\n    type: 'MultipleResponseWithOther',\n    question: question,\n    response: [],\n    options: options.map(text => ({ text, type: 'Fixed' }))\n})\n\nexport const demographics = [\n    // Age ---------------------------------------------------------------------\n    singleResponse('How old are you?', [\n        'Under 18',\n        '18-24 years old',\n        '25-34 years old',\n        '35-44 years old',\n        '45-54 years old',\n        'Over 55'\n    ]),\n    singleResponse('How many years experience do you have programming?', [\n        'Less than 1 year',\n        '1 to 2 years',\n        '2 to 5 years',\n        'Over 5 years'\n    ]),\n    singleResponse('How many years experience do you have programming in JavaScript specifically?', [\n        'Less than 1 year',\n        '1 to 2 years',\n        '2 to 5 years',\n        'Over 5 years'\n    ]),\n    singleResponse('How many years experience do you have programming in Elm specifically?', [\n        'Less than 1 year',\n        '1 to 2 years',\n        '2 to 5 years',\n        'Over 5 years'\n    ]),\n    multipleResponseWithOther('Which of the following languages or frameworks have you used for creating Web applications?', [\n        'Angular / AngularJS [JavaScript]',\n        'ClojureScript',\n        'Elm',\n        'Imba',\n        'PureScript',\n        'React [JavaScript]',\n        'Svelte',\n        'Vue [JavaScript]'\n    ]),\n    singleResponseWithOther('Which of the following languages or frameworks do you have the most experience creating Web applications with?', [\n        'Angular / AngularJS [JavaScript]',\n        'ClojureScript',\n        'Elm',\n        'Imba',\n        'PureScript',\n        'React [JavaScript]',\n        'Svelte',\n        'Vue [JavaScript]'\n    ]),\n]\n\nexport default demographics\n","// Likert scales ---------------------------------------------------------------\nexport const likertScale = (title, description, statements) => ({\n  title: title,\n  description: description,\n  statements: statements.map(statement => ({ statement })),\n  ratings: [\n    'Strongly Disagree',\n    'Disagree',\n    'Neutral',\n    'Agree',\n    'Strongly Agree'\n  ]\n})\n\nexport const likert = [\n  likertScale(\n    'In a typical Elm programming project, how well defined is the end goal?',\n    'Some programmers have a very clear idea of what the finished piece of software should look like and what it should do. Others take a more exploratory approach. The following statements are about how clearly defined the end-goal of a project is before you start programming.',\n    [\n      'Before starting to program I have a clear idea what the program will look like.',\n      'Before starting to program I have a clear idea how the program will work.',\n      'Before starting to program I have a clear idea how to organise my code.',\n      'Before starting to program I write down what I need to do.',\n      'Before starting to program I sketch or wireframe how the program will look.',\n      'It is not usually possible to define a project\\'s requirements before starting a project.',\n      'I start out by trying a large number of variations of a loose idea before settling on something more concrete.'\n    ]\n  ),\n  likertScale(\n    'How much time do you spend on, and how big is, a typical finished Elm programming project?',\n    'Some programmers work on projects for many months or even years. Others prefer to work on a project for just a matter of days or hours. The following statements are about how long a typical project takes before you consider it complete, and how large the codebase is when it is finished.',\n    [\n      'A typical project takes a significant amount of time to complete.',\n      'A finished project\\'s codebase tends to span multiple files and many lines of code.',\n      'I tend to consider a project finished after one or two sessions of programming.',\n      'A finished project\\'s codebase tends to be made up of just one or two files.',\n      'I often edit and re-run the same pieces of code multiple times to see how it changes.',\n      'I comment out old bits of code in case I need to go back to them.',\n      'I regularly check my code into version control systems such as Git or SVN.'\n    ]\n  ),\n  likertScale(\n    'How much does a typical Elm programming project change from beginning to end?',\n    'It is not uncommon for a project to change over time. This can be because requirements change, because we come up with new and interesting ideas, or because an idea just didn\\'t work out how we expected it to. The following statements are about how a typical project typically changes over time and what the causes for that might be.',\n    [\n      'A project is only finished when all my tests pass.',\n      'I think non-critical bugs can lead to unexpected behaviour that can make a project better or more interesting.',\n      'The primary method of interaction in a program has often changed by the time that project is finished.',\n      'I am constantly re-evaluating how the system or program should behave.',\n      'Working on a project is a creative feedback-loop between the computer and myself.'\n    ]\n  )\n]\n\nexport default likert\n","const freeform = (title) => ({ title, response: '' })\n\nexport default [\n    freeform(\"What initially motivated you to learn or use Elm?\"),\n    freeform(\"Try to describe one feature of Elm that helps your programming practice, and why.\"),\n    freeform(\"Try to describe one feature of Elm that hinders your programming practice, and why.\"),\n    freeform(\"If Elm could take one feature from JavaScript, what would it be?\"),\n\n    freeform(\"Try to describe one feature of JavaScript that helps your programming practice, and why.\"),\n    freeform(\"Try to describe one feature of JavaScript that hinders your programming practice, and why.\"),\n    freeform(\"If JavaScript could take one feature from Elm, what would it be?\"),\n\n    freeform(\"If you have any additional thoughts about Elm, JavaScript, or another language, you can leave them here.\")\n]\n","import { Elm } from './elm/Main.elm'\n\nimport demographics from './data/demographics'\nimport likert from './data/likert'\nimport freeform from './data/freeform'\n\nconst app = Elm.Main.init({\n    flags: { demographics, likert, freeform }\n})\n\n// LocalStorage port -----------------------------------------------------------\napp.ports && app.ports.elmToLocalStorage && app.ports.elmToLocalStorage.subscribe(\n    function handleMsg (actions, responses = []) {\n        actions.forEach(action => {\n            switch (action.$) {\n                case 'Batch': {\n                    const batchActions = action.actions\n                    \n                    batchActions.forEach(handleMsg)\n                    break\n                }\n                \n                case 'Clear': {\n                    window.localStorage.clear()\n                    break\n                }\n                \n                case 'Expect': {\n                    const tag = action.tag\n                    const responseType = action.responseType\n                    const response = responses.shift()\n                    \n                    if (response.type === responseType) {\n                        app.ports.localStorageToElm.send({\n                            $: 'GotJson', tag, data: response.data\n                        })\n                    } else {\n                        app.ports.localStorageToElm.send({\n                            $: 'Error', tag, error: `Type mismatch, expected ${responseType} but got ${response.type}`\n                        })\n                    }\n                    break\n                }\n                \n                case 'Read': {\n                    const key = action.key\n                    const data = window.localStorage.getItem(key)\n                    \n                    responses.push({ type: 'Json', data: data ? JSON.parse(data) : null })\n                    break\n                }\n                \n                case 'Write': {\n                    const key = action.key\n                    const value = action.value\n                    \n                    window.localStorage.setItem(key, JSON.stringify(value))\n                    break\n                }\n            }\n        })\n    }\n)\n    "]}